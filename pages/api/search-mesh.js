// pages/api/search-mesh.js
import axios from 'axios';

// Usar DEEPSEEK_API_KEY ao inv√©s de OPENAI_API_KEY
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const MESH_API_KEY = process.env.MESH_API_KEY;
const NCBI_BASE_URL = 'https://eutils.ncbi.nlm.nih.gov/entrez/eutils';

// NOVO: Definir elementos v√°lidos por framework
const FRAMEWORK_ELEMENTS = {
  PICO: ['P', 'I', 'C', 'O'],
  PICOT: ['P', 'I', 'C', 'O', 'T'],
  PICOS: ['P', 'I', 'C', 'O', 'S'],
  PEO: ['P', 'E', 'O'],
  PECO: ['P', 'E', 'C', 'O'],
  PCC: ['P', 'C', 'C2'],
  SPIDER: ['S', 'PI', 'D', 'E', 'R'],
  PIRD: ['P', 'I', 'R', 'D'],
  CoCoPop: ['Co', 'Co2', 'Pop'],
  SPICE: ['S', 'P', 'I', 'C', 'E'],
  ECLIPSE: ['E', 'C', 'L', 'I', 'P', 'SE'],
  BeHEMoTh: ['Be', 'HE', 'Mo', 'Th']
};

// NOVO: Fun√ß√£o para filtrar apenas elementos v√°lidos do framework
function filterValidFrameworkElements(frameworkElements, frameworkType) {
  const validElements = FRAMEWORK_ELEMENTS[frameworkType];
  if (!validElements) {
    console.warn(`Framework n√£o reconhecido: ${frameworkType}`);
    return frameworkElements;
  }
  
  const filtered = {};
  Object.entries(frameworkElements).forEach(([key, value]) => {
    if (validElements.includes(key)) {
      filtered[key] = value;
    } else {
      console.warn(`Elemento "${key}" n√£o √© v√°lido para o framework ${frameworkType}. Ignorando.`);
    }
  });
  
  return filtered;
}

// Fun√ß√£o para extrair conceitos principais usando DeepSeek
async function extractConcepts(frameworkElements, fullQuestion, frameworkType) {
  console.log('ü§ñ extractConcepts - IN√çCIO da extra√ß√£o de conceitos com DeepSeek');
  console.log('üìã Framework Type:', frameworkType);
  console.log('‚ùì Pergunta completa:', fullQuestion);
  console.log('üìä Elementos do framework recebidos:', frameworkElements);
  
  // LOG DETALHADO DE CADA ELEMENTO RECEBIDO
  console.log('\nüîç DETALHAMENTO DOS ELEMENTOS RECEBIDOS:');
  console.log('=====================================');
  Object.entries(frameworkElements).forEach(([elemento, descricao]) => {
    console.log(`üìå ${elemento}: "${descricao}"`);
  });
  console.log('=====================================\n');
  
  const prompt = `
    Voc√™ vai extrair conceitos m√©dicos simples dos elementos de pesquisa para busca posterior em bases de dados.
    
    IMPORTANTE: 
    - N√ÉO tente adivinhar termos MeSH
    - Extraia conceitos SIMPLES e DIRETOS em ingl√™s
    - Use termos m√©dicos comuns, n√£o c√≥digos ou nomenclaturas espec√≠ficas
    - Para cada elemento, forne√ßa m√∫ltiplas varia√ß√µes quando poss√≠vel
    - PROCESSE TODOS OS ELEMENTOS FORNECIDOS
    - CADA ELEMENTO DEVE TER PELO MENOS UM CONCEITO
    
    Framework utilizado: ${frameworkType}
    
    Exemplos de extra√ß√£o correta:
    - "Pacientes adultos com diabetes tipo 2" ‚Üí ["diabetes", "type 2 diabetes", "diabetes mellitus", "adult", "adults"]
    - "adultos obesos" ‚Üí ["obesity", "obese", "adults", "adult", "overweight"]
    - "Metformina" ‚Üí ["metformin"]
    - "dieta de baixo carboidrato" ‚Üí ["low carbohydrate diet", "low-carb diet", "ketogenic diet", "carbohydrate restricted"]
    - "dieta de baixo teor de gordura" ‚Üí ["low fat diet", "fat restricted diet", "low-fat", "reduced fat"]
    - "maior perda de peso" ‚Üí ["weight loss", "weight reduction", "body weight", "weight change"]
    - "Exerc√≠cios aer√≥bicos" ‚Üí ["exercise", "aerobic exercise", "physical activity"]
    - "Controle glic√™mico" ‚Üí ["glycemic control", "blood glucose", "glucose control", "hba1c"]

    Elementos do framework ${frameworkType} para an√°lise:
    ${JSON.stringify(frameworkElements, null, 2)}
    
    Pergunta completa: ${fullQuestion}
    
    IMPORTANTE: Retorne um JSON com arrays de conceitos SIMPLES para CADA elemento do framework fornecido.
    As chaves devem ser EXATAMENTE as mesmas fornecidas no input.
    TODOS os elementos devem ter conceitos extra√≠dos.
    NUNCA retorne arrays vazios.
    
    Para o exemplo fornecido, voc√™ DEVE retornar algo como:
    {
      "P": ["obesity", "obese", "adults", "adult", "overweight"],
      "I": ["low carbohydrate diet", "low-carb diet", "ketogenic diet", "carbohydrate restricted"],
      "C": ["low fat diet", "fat restricted diet", "low-fat", "reduced fat"],
      "O": ["weight loss", "weight reduction", "body weight", "weight change"]
    }
  `;
  console.log('üì§ Enviando prompt para DeepSeek');

  try {
    const response = await axios.post(
      'https://api.deepseek.com/chat/completions',
      {
        model: 'deepseek-chat',
        messages: [
          { 
            role: 'system', 
            content: 'Voc√™ √© um especialista em extra√ß√£o de conceitos m√©dicos para busca em bases de dados. Voc√™ extrai termos simples e diretos, N√ÉO termos MeSH. SEMPRE processe TODOS os elementos fornecidos e NUNCA retorne arrays vazios.' 
          },
          { role: 'user', content: prompt }
        ],
        temperature: 0,
        response_format: { type: "json_object" }
      },
      {
        headers: {
          'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      }
    );

    const concepts = JSON.parse(response.data.choices[0].message.content);
    
    console.log('\n‚úÖ CONCEITOS EXTRA√çDOS PELA IA (DeepSeek):');
    console.log('================================');
    console.log(JSON.stringify(concepts, null, 2));
    console.log('================================\n');
    
    // VERIFICAR SE TODOS OS ELEMENTOS FORAM PROCESSADOS
    const elementosNaoProcessados = Object.keys(frameworkElements).filter(
      elem => !concepts[elem] || concepts[elem].length === 0
    );
    
    if (elementosNaoProcessados.length > 0) {
      console.error('‚ùå ERRO: Elementos n√£o processados pela IA:', elementosNaoProcessados);
      
      // Adicionar conceitos b√°sicos para elementos n√£o processados
      elementosNaoProcessados.forEach(elem => {
        const texto = frameworkElements[elem];
        if (texto) {
          // Tentar extrair conceitos b√°sicos do texto
          concepts[elem] = [texto];
          console.log(`üîß Adicionando conceito b√°sico para ${elem}: ["${texto}"]`);
        }
      });
    }
    
    // LOG SUPER DETALHADO - COMPARA√á√ÉO ENTRADA VS SA√çDA
    console.log('\nüîÑ COMPARA√á√ÉO ENTRADA ‚Üí SA√çDA (POR ELEMENTO):');
    console.log('==============================================');
    Object.entries(frameworkElements).forEach(([elemento, descricao]) => {
      const termos = concepts[elemento] || [];
      console.log(`\nüìå Elemento: ${elemento}`);
      console.log(`   üì• ENTRADA (Descri√ß√£o original): "${descricao}"`);
      console.log(`   üì§ SA√çDA (Conceitos extra√≠dos): ${JSON.stringify(termos)}`);
      console.log(`   üìä Quantidade de conceitos: ${termos.length}`);
      
      if (termos.length > 0) {
        console.log('   üìù Detalhamento dos conceitos:');
        termos.forEach((termo, index) => {
          console.log(`      ${index + 1}. "${termo}"`);
        });
      } else {
        console.log('   ‚ö†Ô∏è NENHUM CONCEITO EXTRA√çDO!');
      }
    });
    console.log('==============================================\n');
    
    console.log('ü§ñ extractConcepts - FIM da extra√ß√£o');
    
    return concepts;
  } catch (error) {
    console.error('‚ùå Erro ao extrair conceitos com DeepSeek:', error);
    console.error('‚ùå Detalhes do erro:', error.response?.data);
    throw error;
  }
}

// Fun√ß√£o para buscar termos MeSH SEM LIMITES
async function searchMeSHTerm(term) {
  console.log(`\nüîç searchMeSHTerm - Buscando termo: "${term}"`);
  
  const debugInfo = {
    searchTerm: term,
    apiCalls: [],
    usingApiKey: !!MESH_API_KEY
  };

  try {
    // Adicionar pequeno delay para evitar rate limiting
    await new Promise(resolve => setTimeout(resolve, 200));
    
    // Busca o ID do termo
    const searchUrl = `${NCBI_BASE_URL}/esearch.fcgi`;
    const searchParams = {
      db: 'mesh',
      term: term,
      retmode: 'json',
      retmax: 50, // Reduzido para 50 para evitar timeout
      ...(MESH_API_KEY && { api_key: MESH_API_KEY })
    };
    
    debugInfo.apiCalls.push({
      type: 'search',
      url: searchUrl,
      params: searchParams,
      hasApiKey: !!MESH_API_KEY
    });

    console.log(`   üì° Chamando NCBI E-utilities...`);
    
    const searchResponse = await axios.get(searchUrl, { 
      params: searchParams,
      timeout: 20000
    });
    
    debugInfo.apiCalls[0].response = {
      count: searchResponse.data.esearchresult.count,
      ids: searchResponse.data.esearchresult.idlist
    };

    console.log(`   üìä Resultados encontrados: ${searchResponse.data.esearchresult.count}`);

    const ids = searchResponse.data.esearchresult.idlist;
    if (!ids || ids.length === 0) {
      console.log(`   ‚ö†Ô∏è Nenhum resultado encontrado`);
      debugInfo.noResultsFound = true;
      return { results: [], debug: debugInfo };
    }

    // Busca detalhes dos termos
    const summaryUrl = `${NCBI_BASE_URL}/esummary.fcgi`;
    const summaryParams = {
      db: 'mesh',
      id: ids.join(','),
      retmode: 'json',
      ...(MESH_API_KEY && { api_key: MESH_API_KEY })
    };

    debugInfo.apiCalls.push({
      type: 'summary',
      url: summaryUrl,
      params: summaryParams,
      hasApiKey: !!MESH_API_KEY
    });

    const summaryResponse = await axios.get(summaryUrl, { 
      params: summaryParams,
      timeout: 20000
    });
    
    const results = [];
    const uids = summaryResponse.data.result.uids || [];
    
    console.log(`   üìã Processando ${uids.length} termos MeSH`);
    
    for (const uid of uids) {
      const meshData = summaryResponse.data.result[uid];
      if (!meshData || meshData.error) continue;
      
      // Extrair TODOS os dados
      const preferredTerm = meshData.ds_meshui || meshData.ds_meshterms?.[0] || '';
      const meshTerms = meshData.ds_meshterms || [];
      
      // Extrair tree numbers
      let treeNumbers = [];
      
      if (meshData.ds_meshhierarchy && Array.isArray(meshData.ds_meshhierarchy)) {
        treeNumbers = meshData.ds_meshhierarchy.filter(h => typeof h === 'string');
      }
      
      if (treeNumbers.length === 0 && meshData.ds_idxlinks) {
        if (Array.isArray(meshData.ds_idxlinks)) {
          treeNumbers = meshData.ds_idxlinks.map(link => {
            if (typeof link === 'string') return link;
            
            if (typeof link === 'object' && link !== null) {
              if (link.parent) return link.parent;
              if (link.code) return link.code;
              if (link.treeNumber) return link.treeNumber;
              if (link.hierarchyCode) return link.hierarchyCode;
              if (link.descriptor) return link.descriptor;
              
              for (const [key, value] of Object.entries(link)) {
                if (typeof value === 'string' && /^[A-Z]\d+/.test(value)) {
                  return value;
                }
              }
              
              return null;
            }
            
            return null;
          }).filter(Boolean);
        }
      }
      
      // Sin√¥nimos
      const synonyms = meshData.ds_meshsynonyms || [];
      
      // Defini√ß√£o
      const definition = meshData.ds_scopenote || '';
      
      // Calcular relevance score
      const relevanceScore = Math.round(95 - (results.length * 0.5));
      
      const result = {
        meshId: uid,
        meshUI: preferredTerm,
        term: meshTerms[0] || term,
        allTerms: meshTerms,
        definition: definition,
        synonyms: synonyms,
        treeNumbers: treeNumbers,
        relevanceScore: relevanceScore
      };
      
      results.push(result);
    }

    console.log(`   ‚úÖ ${results.length} termos MeSH processados`);

    return { results, debug: debugInfo };
  } catch (error) {
    console.error(`   ‚ùå Erro ao buscar MeSH:`, error.message);
    debugInfo.error = error.message;
    return { results: [], debug: debugInfo };
  }
}

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // Configurar headers
  res.setHeader('Content-Type', 'application/json; charset=utf-8');

  console.log('\nüöÄ API MeSH - IN√çCIO DO PROCESSAMENTO');
  console.log('===================================================');
  console.log('üì• Dados recebidos:', JSON.stringify(req.body, null, 2));

  const { frameworkElements, fullQuestion, frameworkType } = req.body;

  // Filtrar elementos v√°lidos
  const validFrameworkElements = filterValidFrameworkElements(frameworkElements, frameworkType);
  console.log('‚úÖ Elementos v√°lidos:', validFrameworkElements);

  try { 
    const processStartTime = Date.now();
    
    // Debug completo do processo
    const fullDebug = {
      'üöÄ IN√çCIO': new Date().toISOString(),
      'üìù ENTRADA ORIGINAL': {
        frameworkElements,
        fullQuestion,
        frameworkType
      },
      'üîë API KEY STATUS': MESH_API_KEY ? 'CONFIGURADA' : 'N√ÉO CONFIGURADA',
      'üîÑ PROCESSO': []
    };

    // PASSO 1: Extrair conceitos usando IA
    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('ü§ñ PASSO 1: EXTRA√á√ÉO DE CONCEITOS COM IA');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
    const concepts = await extractConcepts(validFrameworkElements, fullQuestion, frameworkType);
    
    console.log('\nüîç CONCEITOS EXTRA√çDOS POR ELEMENTO:');
    Object.entries(concepts).forEach(([elem, terms]) => {
      console.log(`${elem}: ${terms.length} conceitos - ${JSON.stringify(terms)}`);
    });
    
    // PASSO 2: Buscar termos MeSH para CADA conceito
    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üîé PASSO 2: BUSCA DE TERMOS MESH');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    
    const results = [];
    const allMeshTerms = [];
    
    // PROCESSAR CADA ELEMENTO SEQUENCIALMENTE
    for (const [element, originalText] of Object.entries(validFrameworkElements)) {
      console.log(`\nüìå PROCESSANDO ELEMENTO: ${element} - "${originalText}"`);
      
      const elementResults = {
        element,
        originalText: originalText,
        terms: []
      };
      
      // Obter conceitos para este elemento
      const elementConcepts = concepts[element] || [];
      
      if (elementConcepts.length === 0) {
        console.log(`‚ö†Ô∏è Nenhum conceito extra√≠do, tentando buscar com texto original`);
        
        // Tentar buscar com o texto original
        if (originalText && originalText.trim()) {
          console.log(`üîç Buscando com texto original: "${originalText}"`);
          const { results: meshTerms } = await searchMeSHTerm(originalText);
          
          // Adicionar termos com score >= 50%
          meshTerms.forEach(meshTerm => {
            if (meshTerm.relevanceScore >= 50) {
              const cleanTerm = { ...meshTerm };
              delete cleanTerm._rawData;
              
              elementResults.terms.push(cleanTerm);
              allMeshTerms.push(cleanTerm);
              console.log(`   ‚úÖ Termo adicionado: "${meshTerm.term}" (${meshTerm.relevanceScore}%)`);
            }
          });
        }
      } else {
        console.log(`üîç ${elementConcepts.length} conceitos para buscar: ${JSON.stringify(elementConcepts)}`);
        
        // Buscar cada conceito
        for (let i = 0; i < elementConcepts.length; i++) {
          const searchTerm = elementConcepts[i];
          console.log(`\n   [${i+1}/${elementConcepts.length}] Buscando: "${searchTerm}"`);
          
          try {
            const { results: meshTerms } = await searchMeSHTerm(searchTerm);
            
            let addedCount = 0;
            meshTerms.forEach(meshTerm => {
              if (meshTerm.relevanceScore >= 50) {
                const cleanTerm = { ...meshTerm };
                delete cleanTerm._rawData;
                
                // Verificar se j√° n√£o foi adicionado
                if (!elementResults.terms.find(t => t.meshId === meshTerm.meshId)) {
                  elementResults.terms.push(cleanTerm);
                  allMeshTerms.push(cleanTerm);
                  addedCount++;
                }
              }
            });
            
            console.log(`   ‚úÖ ${addedCount} termos adicionados (score >= 50%)`);
          } catch (error) {
            console.error(`   ‚ùå Erro ao buscar "${searchTerm}":`, error.message);
          }
        }
      }
      
      // Ordenar por relev√¢ncia
      elementResults.terms.sort((a, b) => b.relevanceScore - a.relevanceScore);
      
      // Adicionar resultado do elemento
      results.push(elementResults);
      
      console.log(`\n‚úÖ ELEMENTO ${element} CONCLU√çDO: ${elementResults.terms.length} termos MeSH encontrados`);
    }

    // Remover duplicatas globais
    const uniqueMeshTerms = allMeshTerms
      .filter((term, index, self) => index === self.findIndex(t => t.meshId === term.meshId))
      .filter(term => term.relevanceScore >= 50);

    const processTime = Date.now() - processStartTime;
    
    // LOG FINAL
    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üìä RESUMO FINAL DO PROCESSAMENTO');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`‚è±Ô∏è Tempo total: ${processTime}ms`);
    console.log(`‚úÖ Elementos processados: ${results.length}`);
    console.log('\nüìã RESUMO POR ELEMENTO:');
    results.forEach((r) => {
      console.log(`${r.element}: ${r.terms.length} termos MeSH`);
    });
    console.log(`\nüéØ Total de termos √∫nicos: ${uniqueMeshTerms.length}`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

    // Preparar resposta
    const responseData = {
      results, 
      allMeshTerms: uniqueMeshTerms,
      debug: process.env.NODE_ENV === 'development' ? fullDebug : undefined
    };
    
    console.log('üì§ Enviando resposta...');
    res.status(200).json(responseData);
  } catch (error) {
    console.error('‚ùå ERRO GERAL:', error);
    res.status(500).json({ 
      error: 'Erro ao buscar termos MeSH',
      details: error.message
    });
  }
}